import json
import pandas as pd
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
from datafc.utils._setup_webdriver import setup_webdriver
from datafc.utils._save_files import save_json, save_excel
from datafc.utils._config import ALLOWED_SOURCES, API_BASE_URLS

def goal_networks_data(
    match_df: pd.DataFrame,
    data_source: str = "sofascore",
    element_load_timeout: int = 10,
    enable_json_export: bool = False,
    enable_excel_export: bool = False
) -> pd.DataFrame:
    """
    Fetches goal network data for each match in the provided match dataset.

    Args:
        match_df (pd.DataFrame): A DataFrame containing match metadata,
            which should be generated by the `match_data` function.
        data_source (str): The data source ('sofavpn' or 'sofascore'). Defaults to 'sofascore'.
        element_load_timeout (int): The maximum time (in seconds) to wait for the API response. Defaults to 10.
        enable_json_export (bool): If `True`, exports the fetched goal network data as a JSON file. Defaults to `False`.
        enable_excel_export (bool): If `True`, exports the fetched goal network data as an Excel file. Defaults to `False`.
    """
    if data_source not in ALLOWED_SOURCES:
        raise ValueError(f"Invalid data source: {data_source}. Must be one of {ALLOWED_SOURCES}")

    if match_df is None or match_df.empty:
        raise ValueError("Match dataframe must be provided and cannot be empty.")

    webdriver_instance = None
    try:
        webdriver_instance = setup_webdriver()
        goal_networks_list = []

        for _, row in match_df.iterrows():
            country, tournament, season, week, game_id = row[
                ["country", "tournament", "season", "week", "game_id"]
            ]

            api_request_url = f"{API_BASE_URLS[data_source]}/api/v1/event/{game_id}/incidents"
            webdriver_instance.get(api_request_url)

            try:
                response_element = WebDriverWait(webdriver_instance, element_load_timeout).until(
                    EC.visibility_of_element_located((By.TAG_NAME, "pre"))
                )
                json_data = json.loads(response_element.text).get("incidents", [])

                if isinstance(json_data, list):
                    goal_networks_df = pd.DataFrame(json_data)
                    goal_networks_df["country"] = country
                    goal_networks_df["tournament"] = tournament
                    goal_networks_df["season"] = season
                    goal_networks_df["week"] = week
                    goal_networks_df["game_id"] = game_id
                    goal_networks_list.append(goal_networks_df)

            except TimeoutException:
                raise RuntimeError(f"Timeout while fetching goal network data for game {game_id}.")
            except json.JSONDecodeError:
                raise RuntimeError(f"Failed to decode goal network data for game {game_id}.")

        goal_networks_df = pd.concat(goal_networks_list, ignore_index=True)

        if goal_networks_df.empty:
            raise ValueError("No goal network data found for the specified parameters.")

        actions_list = []
        for _, row in goal_networks_df[["id", "footballPassingNetworkAction", "country", "tournament", "season", "week", "game_id"]].iterrows():
            if isinstance(row["footballPassingNetworkAction"], list):
                for event in row["footballPassingNetworkAction"]:
                    event["id"] = row["id"]
                    event.update({
                        "country": row["country"],
                        "tournament": row["tournament"],
                        "season": row["season"],
                        "week": row["week"],
                        "game_id": row["game_id"]
                    })
                    actions_list.append(event)

        actions_list_df = pd.DataFrame(actions_list)

        if actions_list_df.empty:
            raise ValueError("No passing network data found.")

        def extract_coordinates(coords, coord_type):
            return coords.get(coord_type) if isinstance(coords, dict) else None

        actions_list_df = actions_list_df.assign(
            player_name=actions_list_df["player"].apply(lambda p: p.get("name") if isinstance(p, dict) else None),
            player_id=actions_list_df["player"].apply(lambda p: p.get("id") if isinstance(p, dict) else None),
            event_type=actions_list_df["eventType"],
            player_x=actions_list_df["playerCoordinates"].apply(lambda coord: extract_coordinates(coord, "x")),
            player_y=actions_list_df["playerCoordinates"].apply(lambda coord: extract_coordinates(coord, "y")),
            pass_end_x=actions_list_df["passEndCoordinates"].apply(lambda coord: extract_coordinates(coord, "x")),
            pass_end_y=actions_list_df["passEndCoordinates"].apply(lambda coord: extract_coordinates(coord, "y")),
            id=actions_list_df["id"],
            is_assist=actions_list_df["isAssist"],
            goalkeeper_x=actions_list_df["gkCoordinates"].apply(lambda coord: extract_coordinates(coord, "x")),
            goalkeeper_y=actions_list_df["gkCoordinates"].apply(lambda coord: extract_coordinates(coord, "y")),
            goal_shot_x=actions_list_df["goalShotCoordinates"].apply(lambda coord: extract_coordinates(coord, "x")),
            goal_shot_y=actions_list_df["goalShotCoordinates"].apply(lambda coord: extract_coordinates(coord, "y")),
            goal_mouth_x=actions_list_df["goalMouthCoordinates"].apply(lambda coord: extract_coordinates(coord, "x")),
            goal_mouth_y=actions_list_df["goalMouthCoordinates"].apply(lambda coord: extract_coordinates(coord, "y")),
            goalkeeper_name=actions_list_df["goalkeeper"].apply(lambda gk: gk.get("name") if isinstance(gk, dict) else None),
            goalkeeper_id=actions_list_df["goalkeeper"].apply(lambda gk: gk.get("id") if isinstance(gk, dict) else None)
        )[
            [
                "country", "tournament", "season", "week", "game_id", "player_name", "player_id", "event_type",
                "player_x", "player_y", "pass_end_x", "pass_end_y", "is_assist", "id", "goalkeeper_x", "goalkeeper_y",
                "goal_shot_x", "goal_shot_y", "goal_mouth_x", "goal_mouth_y", "goalkeeper_name", "goalkeeper_id"
            ]
        ]

        if enable_json_export or enable_excel_export:
            first_row = actions_list_df.iloc[0]

            if enable_json_export:
                save_json(
                    data=actions_list_df,
                    country=first_row["country"],
                    tournament=first_row["tournament"],
                    season=first_row["season"],
                    week_number=first_row["week"]
                )

            if enable_excel_export:
                save_excel(
                    data=actions_list_df,
                    country=first_row["country"],
                    tournament=first_row["tournament"],
                    season=first_row["season"],
                    week_number=first_row["week"]
                )

        return actions_list_df

    except WebDriverException as e:
        raise RuntimeError(f"Selenium WebDriver error: {str(e)}")
    except Exception as e:
        raise RuntimeError(f"Unexpected error while fetching goal network data: {e.__class__.__name__} - {e}")

    finally:
        if webdriver_instance:
            webdriver_instance.quit()