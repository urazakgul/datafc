import json
import pandas as pd
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
from datafc.utils._setup_webdriver import setup_webdriver
from datafc.utils._save_files import save_json, save_excel
from datafc.utils._config import ALLOWED_SOURCES, API_BASE_URLS

def coordinates_data(
    lineups_df: pd.DataFrame,
    data_source: str = "sofascore",
    element_load_timeout: int = 10,
    enable_json_export: bool = False,
    enable_excel_export: bool = False
) -> pd.DataFrame:
    """
    Fetches coordinate data for each player in the provided lineup dataset.

    Args:
        lineups_df (pd.DataFrame): A DataFrame containing player and match metadata,
            which should be generated by the `lineups_data` function.
        data_source (str): The data source ('sofavpn' or 'sofascore'). Defaults to 'sofascore'.
        element_load_timeout (int): The maximum time (in seconds) to wait for the API response. Defaults to 10.
        enable_json_export (bool): If `True`, exports the fetched coordinate data as a JSON file. Defaults to `False`.
        enable_excel_export (bool): If `True`, exports the fetched coordinate data as an Excel file. Defaults to `False`.
    """
    if data_source not in ALLOWED_SOURCES:
        raise ValueError(f"Invalid data source: {data_source}. Must be one of {ALLOWED_SOURCES}")

    if lineups_df is None or lineups_df.empty:
        raise ValueError("Match dataframe must be provided and cannot be empty.")

    try:
        webdriver_instance = setup_webdriver()
        heatmap_data = []

        unique_players = lineups_df[[
            "country", "tournament", "season", "week", "game_id", "team", "player_id", "player_name"
        ]].drop_duplicates()

        if unique_players.empty:
            raise ValueError("No unique players found in lineup data.")

        def process_heatmap_points(data, row):
            if not data:
                return []
            return [
                {
                    "country": row["country"],
                    "tournament": row["tournament"],
                    "season": row["season"],
                    "week": row["week"],
                    "game_id": row["game_id"],
                    "team": row["team"],
                    "player_id": row["player_id"],
                    "player_name": row["player_name"],
                    "x": point.get("x"),
                    "y": point.get("y")
                }
                for point in data if isinstance(point, dict) and "x" in point and "y" in point
            ]

        for _, row in unique_players.iterrows():
            try:
                url = f"{API_BASE_URLS[data_source]}/api/v1/event/{row['game_id']}/player/{row['player_id']}/heatmap"
                webdriver_instance.get(url)

                pre_tag = WebDriverWait(webdriver_instance, element_load_timeout).until(
                    EC.visibility_of_element_located((By.TAG_NAME, "pre"))
                )

                heatmap_json = json.loads(pre_tag.text).get("heatmap", [])
                player_heatmap_data = process_heatmap_points(heatmap_json, row)
                heatmap_data.extend(player_heatmap_data)

            except (TimeoutException, json.JSONDecodeError, WebDriverException) as e:
                raise RuntimeError(f"Error fetching heatmap data for player {row['player_name']} (ID: {row['player_id']}): {str(e)}")

        heatmap_df = pd.DataFrame(heatmap_data)

        if heatmap_df.empty:
            raise ValueError("No heatmap data extracted.")

        if enable_json_export or enable_excel_export:
            first_row = heatmap_df.iloc[0]

            if enable_json_export:
                save_json(
                    data=heatmap_df,
                    country=first_row["country"],
                    tournament=first_row["tournament"],
                    season=first_row["season"],
                    week_number=first_row["week"]
                )

            if enable_excel_export:
                save_excel(
                    data=heatmap_df,
                    country=first_row["country"],
                    tournament=first_row["tournament"],
                    season=first_row["season"],
                    week_number=first_row["week"]
                )

        return heatmap_df

    except WebDriverException as e:
        raise RuntimeError(f"Selenium WebDriver error: {str(e)}")
    except Exception as e:
        raise RuntimeError(f"Unexpected error while fetching heatmap data: {e.__class__.__name__} - {e}")

    finally:
        if webdriver_instance:
            webdriver_instance.quit()